// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/models/user_category.dart';
import 'data/models/user_financial_item.dart';
import 'data/models/user_item.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 4228549374755142210),
      name: 'FinancialItem',
      lastPropertyId: const IdUid(4, 3094017730294721028),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 852269246544459326),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1374442493824593795),
            name: 'amount',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 290467816034440049),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3094017730294721028),
            name: 'itemId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 1043972585507122083),
            relationTarget: 'UserItem')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 4474380120461272255),
      name: 'UserCategory',
      lastPropertyId: const IdUid(4, 7125733078995242716),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6392309507137859323),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8269917080246794357),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4447172373678686381),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7125733078995242716),
            name: 'description',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 6944106862447846046),
            name: 'items',
            targetId: const IdUid(3, 7747437729085487469))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 7747437729085487469),
      name: 'UserItem',
      lastPropertyId: const IdUid(5, 3229825160880687799),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8516539469716402542),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4603267928841892304),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3018275137017811277),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8104732236004685307),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3229825160880687799),
            name: 'categoryId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 1143964970371906005),
            relationTarget: 'UserCategory')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 7747437729085487469),
      lastIndexId: const IdUid(2, 1143964970371906005),
      lastRelationId: const IdUid(1, 6944106862447846046),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    FinancialItem: EntityDefinition<FinancialItem>(
        model: _entities[0],
        toOneRelations: (FinancialItem object) => [object.item],
        toManyRelations: (FinancialItem object) => {},
        getId: (FinancialItem object) => object.id,
        setId: (FinancialItem object, int id) {
          object.id = id;
        },
        objectToFB: (FinancialItem object, fb.Builder fbb) {
          final amountOffset =
              object.amount == null ? null : fbb.writeString(object.amount!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, amountOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addInt64(3, object.item.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final amountParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final object = FinancialItem(
              id: idParam, amount: amountParam, description: descriptionParam);
          object.item.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.item.attach(store);
          return object;
        }),
    UserCategory: EntityDefinition<UserCategory>(
        model: _entities[1],
        toOneRelations: (UserCategory object) => [],
        toManyRelations: (UserCategory object) =>
            {RelInfo<UserCategory>.toMany(1, object.id): object.items},
        getId: (UserCategory object) => object.id,
        setId: (UserCategory object, int id) {
          object.id = id;
        },
        objectToFB: (UserCategory object, fb.Builder fbb) {
          final typeOffset =
              object.type == null ? null : fbb.writeString(object.type!);
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, typeOffset);
          fbb.addOffset(2, titleOffset);
          fbb.addOffset(3, descriptionOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final object = UserCategory(
              id: idParam,
              type: typeParam,
              title: titleParam,
              description: descriptionParam);
          InternalToManyAccess.setRelInfo<UserCategory>(
              object.items, store, RelInfo<UserCategory>.toMany(1, object.id));
          return object;
        }),
    UserItem: EntityDefinition<UserItem>(
        model: _entities[2],
        toOneRelations: (UserItem object) => [object.category],
        toManyRelations: (UserItem object) => {},
        getId: (UserItem object) => object.id,
        setId: (UserItem object, int id) {
          object.id = id;
        },
        objectToFB: (UserItem object, fb.Builder fbb) {
          final typeOffset =
              object.type == null ? null : fbb.writeString(object.type!);
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, typeOffset);
          fbb.addOffset(2, titleOffset);
          fbb.addOffset(3, descriptionOffset);
          fbb.addInt64(4, object.category.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final object = UserItem(
              type: typeParam, title: titleParam, description: descriptionParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.category.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.category.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [FinancialItem] entity fields to define ObjectBox queries.
class FinancialItem_ {
  /// see [FinancialItem.id]
  static final id =
      QueryIntegerProperty<FinancialItem>(_entities[0].properties[0]);

  /// see [FinancialItem.amount]
  static final amount =
      QueryStringProperty<FinancialItem>(_entities[0].properties[1]);

  /// see [FinancialItem.description]
  static final description =
      QueryStringProperty<FinancialItem>(_entities[0].properties[2]);

  /// see [FinancialItem.item]
  static final item =
      QueryRelationToOne<FinancialItem, UserItem>(_entities[0].properties[3]);
}

/// [UserCategory] entity fields to define ObjectBox queries.
class UserCategory_ {
  /// see [UserCategory.id]
  static final id =
      QueryIntegerProperty<UserCategory>(_entities[1].properties[0]);

  /// see [UserCategory.type]
  static final type =
      QueryStringProperty<UserCategory>(_entities[1].properties[1]);

  /// see [UserCategory.title]
  static final title =
      QueryStringProperty<UserCategory>(_entities[1].properties[2]);

  /// see [UserCategory.description]
  static final description =
      QueryStringProperty<UserCategory>(_entities[1].properties[3]);

  /// see [UserCategory.items]
  static final items =
      QueryRelationToMany<UserCategory, UserItem>(_entities[1].relations[0]);
}

/// [UserItem] entity fields to define ObjectBox queries.
class UserItem_ {
  /// see [UserItem.id]
  static final id = QueryIntegerProperty<UserItem>(_entities[2].properties[0]);

  /// see [UserItem.type]
  static final type = QueryStringProperty<UserItem>(_entities[2].properties[1]);

  /// see [UserItem.title]
  static final title =
      QueryStringProperty<UserItem>(_entities[2].properties[2]);

  /// see [UserItem.description]
  static final description =
      QueryStringProperty<UserItem>(_entities[2].properties[3]);

  /// see [UserItem.category]
  static final category =
      QueryRelationToOne<UserItem, UserCategory>(_entities[2].properties[4]);
}
